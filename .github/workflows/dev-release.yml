name: Development Sentry Release

on:
  push:
    branches:
      - devs

jobs:
  generate_dev_tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.taggerDev.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Generate Development Version
        id: taggerDev
        uses: anothrNick/github-tag-action@1.39.0
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          WITH_V: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: devs
          TAG_CONTEXT: branch
          PRESET_TYPE: dev

  create_github_release:
    needs: generate_dev_tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
    
      - name: Generate Detailed Release Notes
        id: release_notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.generate_dev_tag.outputs.new_tag }}"
          DATE=$(date +"%Y-%m-%d")
          REPO="${GITHUB_REPOSITORY}"
          
          echo "Generating release notes for version ${VERSION}"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "# ${VERSION} (${DATE})" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Bug Fixes" >> $GITHUB_OUTPUT
          
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%h %s" | while read -r line; do
            commit_hash=$(echo $line | cut -d' ' -f1)
            commit_message=$(echo $line | cut -d' ' -f2-)
            if [[ $commit_message == Fix:* ]] || [[ $commit_message == fix:* ]]; then
              issue_number=$(echo $commit_message | grep -oP '#\d+' | head -1)
              if [ ! -z "$issue_number" ]; then
                echo "* ${commit_message} ([${issue_number}](https://github.com/${REPO}/issues/${issue_number#\#})) ([${commit_hash}](https://github.com/${REPO}/commit/${commit_hash}))" >> $GITHUB_OUTPUT
              else
                echo "* ${commit_message} ([${commit_hash}](https://github.com/${REPO}/commit/${commit_hash}))" >> $GITHUB_OUTPUT
              fi
            fi
          done
          
          echo "" >> $GITHUB_OUTPUT
          echo "## Features" >> $GITHUB_OUTPUT
          
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%h %s" | while read -r line; do
            commit_hash=$(echo $line | cut -d' ' -f1)
            commit_message=$(echo $line | cut -d' ' -f2-)
            if [[ $commit_message == Feat:* ]] || [[ $commit_message == feat:* ]]; then
              issue_number=$(echo $commit_message | grep -oP '#\d+' | head -1)
              if [ ! -z "$issue_number" ]; then
                echo "* ${commit_message} ([${issue_number}](https://github.com/${REPO}/issues/${issue_number#\#})) ([${commit_hash}](https://github.com/${REPO}/commit/${commit_hash}))" >> $GITHUB_OUTPUT
              else
                echo "* ${commit_message} ([${commit_hash}](https://github.com/${REPO}/commit/${commit_hash}))" >> $GITHUB_OUTPUT
              fi
            fi
          done
          
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1.10.0
        with:
          tag: ${{ needs.generate_dev_tag.outputs.new_tag }}
          name: Release ${{ needs.generate_dev_tag.outputs.new_tag }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: true
          token: ${{ secrets.PAT }}

  create_dev_sentry_release:
    needs: [generate_dev_tag, create_github_release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Sentry release
        uses: getsentry/action-release@v1.2.0
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: development
          version: ${{ needs.generate_dev_tag.outputs.new_tag }}
          sourcemaps: "./src"
          url_prefix: "~"

      - name: Echo Release Info
        run: |
          echo "Created development release: ${{ needs.generate_dev_tag.outputs.new_tag }}"
          echo "Environment: development"